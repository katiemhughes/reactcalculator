{"version":3,"sources":["App.js","components/ResultComponent.js","components/KeypadComponent.js","serviceWorker.js","index.js"],"names":["fetch","then","response","json","data","console","log","App","state","result","handleClick","button","calculate","reset","temp","setState","eval","e","className","this","Component","ResultComponent","props","KeypadComponent","value","onClick","target","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.2ecccf64.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport ResultComponent from \"./components/ResultComponent\";\r\nimport KeypadComponent from \"./components/KeypadComponent\";\r\n\r\nfetch('https://api.github.com/users/hacktivist123/repos')\r\n  .then(response => response.json())\r\n  .then(data => console.log(data));\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    result: \"\"\r\n  }\r\n\r\n  handleClick = button => {\r\n    // console.log(button)\r\n    if (button === \"=\"){\r\n      this.calculate()\r\n    } else if (button === \"Clear\"){\r\n      this.reset()\r\n    } else {\r\n      let temp = this.state.result\r\n      this.setState({\r\n        result: temp + button\r\n      })\r\n\r\n      // this.setState(prevState => ({\r\n      //   result: prevState.result + button\r\n      // }))\r\n    }\r\n  };\r\n\r\n  calculate = () => {\r\n    try {\r\n      this.setState({\r\n        result: eval(this.state.result || \"\") + \"\"\r\n      })\r\n    } catch (e) {\r\n      this.setState({\r\n        result: \"error\"\r\n      })\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      result: \"\"\r\n    })\r\n  };\r\n\r\n  render() {\r\n    return(\r\n      <div>\r\n        <div className=\"calc-body\">\r\n          <h1>Calculator</h1>\r\n          <ResultComponent result={this.state.result}/>\r\n          <KeypadComponent handleClick={this.handleClick} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n  \r\n\r\nexport default App;","import React, { Component } from \"react\";\r\n\r\nclass ResultComponent extends Component {\r\n\r\n    render() {\r\n        let { result } = this.props;\r\n        return (\r\n            <div className=\"result\">\r\n                <p>{ result }</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ResultComponent;","import React, { Component } from \"react\";\r\n\r\nconst KeypadComponent = ({ handleClick }) => {\r\n    return (\r\n        <div className=\"calc-wrapper\">\r\n            <div className=\"row\">\r\n                <button value=\"7\" onClick={(e) => handleClick(e.target.value)}>7</button>\r\n                <button value=\"8\" onClick={(e) => handleClick(e.target.value)}>8</button>\r\n                <button value=\"9\" onClick={(e) => handleClick(e.target.value)}>9</button>\r\n                <button className=\"operator\" value=\"/\" onClick={(e) => handleClick(e.target.value)}>/</button>\r\n            </div>\r\n            <div className=\"row\">\r\n                <button value=\"4\" onClick={(e) => handleClick(e.target.value)}>4</button>\r\n                <button value=\"5\" onClick={(e) => handleClick(e.target.value)}>5</button>\r\n                <button value=\"6\" onClick={(e) => handleClick(e.target.value)}>6</button>\r\n                <button value=\"*\" className=\"operator\" onClick={(e) => handleClick(e.target.value)}>*</button>\r\n            </div>\r\n            <div className=\"row\">\r\n                <button value=\"1\" onClick={(e) => handleClick(e.target.value)}>1</button>\r\n                <button value=\"2\" onClick={(e) => handleClick(e.target.value)}>2</button>\r\n                <button value=\"3\" onClick={(e) => handleClick(e.target.value)}>3</button>\r\n                <button value=\"+\" className=\"operator\" onClick={(e) => handleClick(e.target.value)}>+</button>\r\n            </div>\r\n            <div className=\"row\">\r\n                <button value=\".\" className=\"operator\" onClick={(e) => handleClick(e.target.value)}>.</button>\r\n                <button value=\"0\" onClick={(e) => handleClick(e.target.value)}>0</button>\r\n                <button value=\"=\" className=\"operator\" onClick={(e) => handleClick(e.target.value)}>=</button>\r\n                <button value=\"-\" className=\"operator\" onClick={(e) => handleClick(e.target.value)}>-</button>\r\n            </div>\r\n            <div className=\"row\" className=\"clear\">\r\n                <button value=\"Clear\" className=\"operator\" onClick={(e) => handleClick(e.target.value)}>Clear</button>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default KeypadComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}